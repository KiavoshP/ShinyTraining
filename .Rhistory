pl <- pl + points(limitsBW[,2],type = 'l', col = "red")
pl
return(pl)
}
compDf <- compGetter()
compareDf1 <- compDf$comPar
CC <- compareDf1$RC
actBwr <- data.frame(index = 1:length(compareDf1$BW$actBWresult),BW = compareDf1$BW$actBWresult)
kStepAheadOptPredsConstSVM <- compDf$kStep
pl <- ggplot(actBwr, aes(index, BW))
pl <- ggplot(actBwr, aes(index, BW))
pl <- pl + points(compareDf1$BW$redBWresult,type = 'l', col = 'orange')
pl <- pl + points(rep(29.5,length(compareDf1$RC$actRCresult)),type = 'l', col = 'black')
pl <- pl + points(rep(33.2,length(compareDf1$RC$actRCresult)),type = 'l', col = 'black')
pl <- pl + points(limitsBW[,1],type = 'l', col = "red")
pl <- pl + points(limitsBW[,2],type = 'l', col = "red")
pl
plot(compareDf1$BW$actBWresult,type = 'l',col = 'blue',main = "BW results")
plot(compareDf1$BW$actBWresult,type = 'l',col = 'blue',main = "BW results")
pl <- ggplot(actBwr, aes(index, BW))
pl <- ggplot(actBwr, aes(index, BW))
shiny::runApp('R')
runApp('Shiny')
library(e1071)
library(plyr)
library(ggplot2)
library(reshape2)
rawdataRC <- passedDF
source('20180503optimization.R', echo = T)
source('functions/20180503optimization.R', echo = T)
source('functions/20180503datapreparation.R', echo = T)
source('functions/20180503utils.R', echo = T)
library(shiny)
options(shiny.maxRequestSize = 500 * 1024 ^ 2)
source('functions/20180503optimization.R', echo = T)
source('functions/20180503datapreparation.R', echo = T)
source('functions/20180503utils.R', echo = T)
source('functions/all_4lims', echo = T)
source('functions/all_4lims.R', echo = T)
source('functions/all_4lims.R', echo = T)
library(shiny)
options(shiny.maxRequestSize = 500 * 1024 ^ 2)
source('functions/20180503optimization.R', echo = T)
source('functions/20180503datapreparation.R', echo = T)
source('functions/20180503utils.R', echo = T)
source('functions/all_4lims.R', echo = T)
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
source('shiny/functions/20180503optimization.R', echo = T)
source('shiny/functions/20180503datapreparation.R', echo = T)
source('shiny/functions/20180503utils.R', echo = T)
source('shiny/functions/all_4lims.R', echo = T)
source('shiny/functions/visualization.R', echo = T)
source('shiny/functions/rs_util.R', echo = T)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
tagname <- c(1,42,214,40,79)
description <- c("RC","BW","x1","x2","x3")
LSL <- c(60.5,29.5,0.326969624,0.989000797,0.994703293)
USL <- c(61,33.2,0.592239439,0.990908504,1.092982292)
minTagChange <- c(0,0.1,0.1,0.05,0.05)
maxTagChange <-  c(0,0.5,0.3,0.2,0.1)
#constructing new limit Data frame
limitDF <- data.frame(cbind(tagname,description,LSL,USL,minTagChange,maxTagChange))
names(limitDF) <- c("tagname","description","LSL","USL","minTagChange","maxTagChange")
#writing limit dataframe in csvfile
write.csv(x = limitDF, file = "data/20171222_RC_BW_4330_optim_2_sets_taglimits_208_set8.csv", row.names = F)
#runing the
mixDF1 <- predictionInitiation(rawData)
pp <- rcPlot(mixDF1)
pp
ppl <-bwPlot(mixDF1)
ppl
compareDf <- mixDF1$comPar
compareDf1 <- mixDF1$comPar1
kStepAheadOptPredsConstSVM <- mixDF1$kStep
limitsBW <- mixDF1$limitsBW
limitsX1 <- mixDF1$limitsX1
limitsX2 <- mixDF1$limitsX2
limitsX3 <- mixDF1$limitsX3
oldlimitsBW <- mixDF1$oldlimitsBW
oldlimitsX1 <- mixDF1$oldlimitsX1
oldlimitsX2 <- mixDF1$oldlimitsX2
oldlimitsX3 <- mixDF1$oldlimitsX3
kStepRecommendedVsActualParValues <- mixDF1$kStepRecommendedVsActualParValues
write.csv(x = compareDf, file = "results/grade4330/20180426_new_rec_initial_results_finalv2.csv", row.names = F)
write.csv(x = kStepRecommendedVsActualParValues, file = "results/grade4330/20180426_new_rec_actualVsRecommendedv2.csv", row.names = F)
write.csv(x = cbind(limitsBW,limitsX1,limitsX2,limitsX3), file = "results/grade4330/20180426_new_rec_updatedlimitsv2.csv", row.names = F)
write.csv(x = cbind(oldlimitsBW,oldlimitsX1,oldlimitsX2,oldlimitsX3), file = "results/grade4330/20180426_new_rec_updatedOldlimitsv2.csv", row.names = F)
itter <- length(input$cvarDropDown)
shinyApp(ui, server)
library(shiny)
options(shiny.maxRequestSize = 500 * 1024 ^ 2)
source('shiny/functions/20180503optimization.R', echo = T)
source('shiny/functions/20180503datapreparation.R', echo = T)
source('shiny/functions/20180503utils.R', echo = T)
source('shiny/functions/all_4lims.R', echo = T)
source('shiny/functions/visualization.R', echo = T)
source('shiny/functions/rs_util.R', echo = T)
ui <- fluidPage(
# App title ----
titlePanel("Recommendation System"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
fileInput("dataSet", "Data Set (csv)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
uiOutput("controlVariables"),
# List of tags to choose from for a lever.
uiOutput("cVariableLim"),
# Horizontal line ----
tags$hr(),
downloadButton("generateTabel", "Generate")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("RC Visualize",
fluidRow(
column(10, align="center",
plotOutput("rcResult",
width = "100%")
)
),
#plotOutput("map", width = "70%"),
tags$hr(),
textOutput("statistics"),
textOutput("miu"),
textOutput("sig")
),
tabPanel("BW Visualize",
fluidRow(
column(10, align="center",
plotOutput("rcResult",
width = "100%")
)
),
#plotOutput("map", width = "70%"),
tags$hr(),
textOutput("statistics"),
textOutput("miu"),
textOutput("sig")
),
tabPanel("Table", tableOutput("contents"))
)
# textOutput("correlationResult"),
#
# plotOutput("map"),
# # Output: Data file ----
# tableOutput("contents")
)
)
)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$dataSet)
tryCatch(
{
rawData <- read.csv(file = input$dataSet$datapath,
header = T,
stringsAsFactors = F)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
return(rawData)
})
prepTagGlossory <- reactive({
req(input$dataSet)
tryCatch(
{
rawData <- read.csv(file = input$dataSet$datapath,
header = T,
stringsAsFactors = F)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
return(getTagGlossary(rawData))
})
output$controlVariables <- renderUI({
cVars <- prepTagGlossory[, "dataFileColname"]
selectInput(inputId = "cvarDropDown",
label = "Choose a Set of Control Variables",
choices = as.character(cVars[1]),
selected = cVars[[1]], multiple = TRUE)
})
output$cVariableLim <- renderUI({
if(!is.null(input$cvarDropDown)) {
i <- 1
l <- list()
itter <- length(input$cvarDropDown)
while(i <= itter) {
dfS <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"cNames"] == ml[i], "cId",drop(TRUE)])
l[[i]] = dfS[1]
textInput(paste("cvari", itter), paste(l[[i]]), "Choose The Limits")
i = i + 1
}
}
})
}
shinyApp(ui, server)
rawData <- read.csv(file = input$dataSet$datapath,
header = T,
stringsAsFactors = F)
# rawData <- read.csv(file = input$dataSet$datapath,
#                     header = T,
#                     stringsAsFactors = F)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
tryCatch(
{
# rawData <- read.csv(file = input$dataSet$datapath,
#                     header = T,
#                     stringsAsFactors = F)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
output$controlVariables <- renderUI({
cVars <- prepTagGlossory[, "dataFileColname"]
selectInput(inputId = "cvarDropDown",
label = "Choose a Set of Control Variables",
choices = as.character(cVars[1]),
selected = cVars[[1]], multiple = TRUE)
})
cVars <- prepTagGlossory[, "dataFileColname"]
cVars <- prepTagGlossory()[, "dataFileColname"]
runApp('shiny')
library(shiny)
options(shiny.maxRequestSize = 500 * 1024 ^ 2)
source('shiny/functions/20180503optimization.R', echo = T)
source('shiny/functions/20180503datapreparation.R', echo = T)
source('shiny/functions/20180503utils.R', echo = T)
source('shiny/functions/all_4lims.R', echo = T)
source('shiny/functions/visualization.R', echo = T)
source('shiny/functions/rs_util.R', echo = T)
runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
source('shiny/functions/20180503optimization.R', echo = T)
source('shiny/functions/20180503datapreparation.R', echo = T)
source('shiny/functions/20180503utils.R', echo = T)
source('shiny/functions/all_4lims.R', echo = T)
source('shiny/functions/visualization.R', echo = T)
source('shiny/functions/rs_util.R', echo = T)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
tagname <- c(1,42,214,40,79)
description <- c("RC","BW","x1","x2","x3")
LSL <- c(60.5,29.5,0.326969624,0.989000797,0.994703293)
USL <- c(61,33.2,0.592239439,0.990908504,1.092982292)
minTagChange <- c(0,0.1,0.1,0.05,0.05)
maxTagChange <-  c(0,0.5,0.3,0.2,0.1)
#constructing new limit Data frame
limitDF <- data.frame(cbind(tagname,description,LSL,USL,minTagChange,maxTagChange))
names(limitDF) <- c("tagname","description","LSL","USL","minTagChange","maxTagChange")
#writing limit dataframe in csvfile
write.csv(x = limitDF, file = "data/20171222_RC_BW_4330_optim_2_sets_taglimits_208_set8.csv", row.names = F)
#runing the system and getting the results.
mixDF1 <- predictionInitiation(rawData)
pp <- rcPlot(mixDF1)
pp
View(mixDF1)
View(mixDF1)
shiny::runApp('shiny')
runApp('shiny')
#This methode will manipulate the raw data and creat
# a tag-id pair glossary
#
# @return: return a data frame contaning the tagID, Col Names
getTagGlossary <- function(rawData) {
cNames <- colnames(rawData)
cId <- paste("x",1:length(cNames))
tagGlossary <- data.frame(cId, cNames)
colnames(tagGlossary) <- c("tagID", "dataFileColname")
## Exception
if(!all(tagGlossary[, "dataFileColname"] == colnames(data)))
{ stop("Error in data column match") }
return(tagGlosory)
}
cNames <- colnames(rawData)
cId <- paste("x",1:length(cNames))
tagGlossary <- data.frame(cId, cNames)
colnames(tagGlossary) <- c("tagID", "dataFileColname")
## Exception
if(!all(tagGlossary[, "dataFileColname"] == colnames(data)))
{ stop("Error in data column match") }
return(tagGlosory)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
#This method will initiate the prediction process by getting
#the give directory from UI and pass it to all_4lims
#
# @return
source('shiny/app.R', echo = T)
#This method will initiate the prediction process by getting
#the give directory from UI and pass it to all_4lims
#
# @return
source('shiny/app.R', echo = T)
source('shiny/functions/20180503optimization.R', echo = T)
source('shiny/functions/20180503datapreparation.R', echo = T)
source('shiny/functions/20180503utils.R', echo = T)
source('shiny/functions/all_4lims.R', echo = T)
source('shiny/functions/visualization.R', echo = T)
source('shiny/functions/rs_util.R', echo = T)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
#Defining new limitss
tagGlos <- getTagGlossary(rawData)
View(rawData)
View(tagGlos)
rawData <- read.csv(file = "data/20171222_RC_4330_train_data_208_optim_set7.csv",
header = T,
stringsAsFactors = F)
#Defining new limitss
tagGlos <- getTagGlossary(rawData)
myl <- c("X24ZI734.PV","X24PIC437.PV","X26REFTOT.SE.PV","X24SI256.PV")
controlTagList <- droplevels(getTagGlossary(datasetInput())[getTagGlossary(datasetInput())[,"cNames"] == toList[length(toList())], "cId",drop(TRUE)])
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"cNames"] == myl[1], "cId",drop(TRUE)])
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(controlTagList)
print(controlTagList[1])
print(controlTagList[2])
print(controlTagList[[1]])
print(controlTagList[1])
print(controlTagList[1])
print(toString(controlTagList[1]))
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(toString(controlTagList[1]))
controlTagList = c(controlTagList, droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] ==  myl[2], "tagID",drop(TRUE)]))
print(toString(controlTagList))
print(toString(controlTagList[]))
print(toString(controlTagList[1]))
print(toString(controlTagList[2]))
print(toString(controlTagList[[1]]))
print(toString(controlTagList[[2]]))
controlTagList = append(controlTagList, droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] ==  myl[2], "tagID",drop(TRUE)]))
print(toString(controlTagList))
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(toString(controlTagList[1]))
controlTagList = append(controlTagList, droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] ==  myl[2], "tagID",drop(TRUE)]))
print(toString(controlTagList))
print(toString(controlTagList[1]))
source('~/recommendation-systems/main.R', echo=TRUE)
#Defining new limitss
tagGlos <- getTagGlossary(rawData)
myl <- c("X24ZI734.PV","X24PIC437.PV","X26REFTOT.SE.PV","X24SI256.PV")
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(toString(controlTagList[1]))
controlTagList <- append(controlTagList, droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] ==  myl[2], "tagID",drop(TRUE)]))
print(toString(controlTagList[1]))
controlTagList <-
print(controlTagList[1])
controlTagList <-
print(controlTagList[[1]])
controlTagList <- droplevels(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(toString(controlTagList[1]))
controlTagList <-
print(controlTagList[[1]])
print(controlTagList[1])
print(controlTagList[1])
controlTagList <- toString(getTagGlossary(rawData)[getTagGlossary(rawData)[,"dataFileColname"] == myl[1], "tagID",drop(TRUE)])
print(controlTagList[1])
runApp('shiny')
runApp('shiny')
runApp('shiny')
input$checkGroup
runApp('shiny')
runApp('shiny')
runApp('shiny')
tId <- list()
runApp('shiny')
View(tId)
runApp('shiny')
tId <- list()
length(tId)
runApp('shiny')
View(tId)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(tId)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
makeCVList <- function(controlVarTag) {
if (!is.null(tId) && length(tId) != 0) {
tId[length(tId) + 1] <- controlVarTag
} else {
tId <- list()
tId[1] <- controlVarTag
}
return(tId)
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(tId)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
source('~/recommendation-systems/main.R', echo=TRUE)
View(compareDf)
View(compareDf)
pp <- rcPlot(mixDF1)
pp
ppl
runApp('shiny')
print(toList())
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(mixDF1)
View(mixDF1)
View(mixDF1)
runApp('shiny')
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
